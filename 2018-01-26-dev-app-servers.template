{
    "Description": "Effective DevOps in AWS: HelloWorld web application",
    "Outputs": {
        "WebUrl": {
            "Description": "Application endpoint",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "LoadBalancer",
                                "DNSName"
                            ]
                        },
                        ":",
                        "8100"
                    ]
                ]
            }
        }
    },
    "Parameters": {
        "InstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large"
            ],
            "ConstraintDescription": "must be a valid EC2 T2 instance type.",
            "Default": "t2.micro",
            "Description": "WebServer EC2 instance type",
            "Type": "String"
        },
        "KeyPair": {
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Description": "Name of an existing EC2 KeyPair to SSH",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "PrivateSubnet": {
            "ConstraintDescription": "PrivateSubnet",
            "Description": "PrivateSubnet",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "PublicSubnet": {
            "ConstraintDescription": "PublicSubnet",
            "Description": "PublicSubnet",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "ScaleCapacity": {
            "Default": "1",
            "Description": "Number servers to run",
            "Type": "String"
        },
        "VpcId": {
            "Description": "VPC",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Resources": {
        "AutoscalingGroup": {
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "ScaleCapacity"
                },
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfiguration"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "LoadBalancer"
                    }
                ],
                "MaxSize": 1,
                "MinSize": 1,
                "VPCZoneIdentifier": {
                    "Ref": "PrivateSubnet"
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "CPUTooHigh": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "ScaleUpPolicy"
                    }
                ],
                "AlarmDescription": "Alarm if CPU too high",
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoscalingGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "1",
                "InsufficientDataActions": [
                    {
                        "Ref": "ScaleUpPolicy"
                    }
                ],
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "60"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "CPUTooLow": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "ScaleDownPolicy"
                    }
                ],
                "AlarmDescription": "Alarm if CPU too low",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoscalingGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "1",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "30"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "InstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "Role"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "LaunchConfiguration": {
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "ImageId": "ami-97785bed",
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "sudo usermod --groups 500,10,0 ec2-useryum -y update\n",
                                "yum install -y awslogs\n",
                                "service awslogs start\n",
                                "chkconfig awslogs on\n",
                                "mkdir /app\n",
                                "chown root:ec2-user /app\n",
                                "chmod 770 /app\n",
                                "sudo chown root:ec2-user /etc/init.d/\n",
                                "sudo chmod 770 /etc/init.d/\n",
                                "curl -C - -LR#OH 'Cookie: oraclelicense=accept-securebackup-cookie' -k 'http://download.oracle.com/otn-pub/java/jdk/9.0.4+11/c2514751926b4512b076cc82f959763f/jdk-9.0.4_linux-x64_bin.tar.gz'\n",
                                "tar -xzvf jdk* -C /app/\n",
                                "export JAVA_HOME=/app/jdk-9\n",
                                "export PATH=$PATH:$JAVA_HOME/bin\n",
                                "source /etc/environment\n",
                                "wget https://raw.githubusercontent.com/russest3/dev/master/java/java.csh\n",
                                "wget https://raw.githubusercontent.com/russest3/dev/master/java/java.sh\n",
                                "cp java.* /etc/profile.d/ && chmod 755 /etc/profile.d/java.*\n",
                                "wget http://download.jboss.org/wildfly/11.0.0.Final/wildfly-11.0.0.Final.zip\n",
                                "unzip wildfly-11.0.0.Final.zip -d /app/\n",
                                "echo JBOSS_HOME='/app/wildfly-11.0.0.Final' >> /app/wildfly-11.0.0.Final/bin/standalone.conf\n",
                                "echo JAVA_HOME='/app/jdk-9.0.4' >> /app/wildfly-11.0.0.Final/bin/standalone.conf\n",
                                "IP=$(ifconfig | grep 'inet addr' | grep -v 127.0.0.1 | cut -d ':' -f 2 | awk '{ print $1 }')\n",
                                "sed -i s/127.0.0.1/$IP/g /app/wildfly-11.0.0.Final/standalone/configuration/standalone.xml\n",
                                "/app/wildfly-11.0.0.Final/bin/standalone.sh &\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "LoadBalancer": {
            "Properties": {
                "ConnectionDrainingPolicy": {
                    "Enabled": true,
                    "Timeout": "10"
                },
                "CrossZone": "true",
                "HealthCheck": {
                    "HealthyThreshold": "5",
                    "Interval": "20",
                    "Target": {
                        "Fn::Join": [
                            "",
                            [
                                "TCP:",
                                "8100"
                            ]
                        ]
                    },
                    "Timeout": "15",
                    "UnhealthyThreshold": "2"
                },
                "Listeners": [
                    {
                        "InstancePort": "8100",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "Subnets": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "LoadBalancerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Web load balancer security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "Policy": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:*"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                "*"
                            ]
                        },
                        {
                            "Action": [
                                "logs:*"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                "*"
                            ]
                        }
                    ]
                },
                "PolicyName": "AllowS3",
                "Roles": [
                    {
                        "Ref": "Role"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "Role": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }
            },
            "Type": "AWS::IAM::Role"
        },
        "ScaleDownPolicy": {
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AutoscalingGroup"
                },
                "ScalingAdjustment": "-1"
            },
            "Type": "AWS::AutoScaling::ScalingPolicy"
        },
        "ScaleUpPolicy": {
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AutoscalingGroup"
                },
                "ScalingAdjustment": "1"
            },
            "Type": "AWS::AutoScaling::ScalingPolicy"
        },
        "SecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow SSH access",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.10.0.0/16",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "CidrIp": "10.10.0.0/16",
                        "FromPort": "8100",
                        "IpProtocol": "tcp",
                        "ToPort": "8100"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        }
    }
}
